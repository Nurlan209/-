import logging
import asyncio
import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.utils.deep_linking import get_start_link
from aiogram.dispatcher.filters import CommandStart

API_TOKEN = '7535405556:AAGMqFynf25DF8RV-Zy6G4RssZOzrISLB50'
ADMIN_ID = 7702280273

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ë–∞–∑–∞
conn = sqlite3.connect('bot_db.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    bonus INTEGER DEFAULT 10,
    inviter_id INTEGER
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS videos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_id TEXT
)''')

conn.commit()

# üîò –ö–Ω–æ–ø–∫–∞–ª–∞—Ä
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("–î–µ—Ç—Å–∫–∏–π"), KeyboardButton("–ë–æ–Ω—É—Å"), KeyboardButton("VIP"))

admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
admin_kb.add(KeyboardButton("–í–∏–¥–µ–æ —Å–∞–ª—É"), KeyboardButton("“ö–æ–ª–¥–∞–Ω—É—à—ã —Å–∞–Ω—ã"), KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞"))

# üë§ –°—Ç–∞—Ä—Ç
@dp.message_handler(CommandStart(deep_link=True))
async def start_ref(message: types.Message):
    inviter_id = int(message.get_args())
    user_id = message.from_user.id

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (user_id, bonus, inviter_id) VALUES (?, ?, ?)", (user_id, 10, inviter_id))
        cursor.execute("UPDATE users SET bonus = bonus + 2 WHERE user_id = ?", (inviter_id,))
        conn.commit()

    kb = admin_kb if user_id == ADMIN_ID else main_kb
    await message.answer("–ë–æ—Ç“õ–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!", reply_markup=kb)

@dp.message_handler(CommandStart())
async def start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute("INSERT INTO users (user_id, bonus) VALUES (?, ?)", (user_id, 10))
        conn.commit()

    kb = admin_kb if user_id == ADMIN_ID else main_kb
    await message.answer("–ë–æ—Ç“õ–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!", reply_markup=kb)

# üé• –í–∏–¥–µ–æ —Å–∞–ª—É (–ê–¥–º–∏–Ω)
@dp.message_handler(lambda msg: msg.text == "–í–∏–¥–µ–æ —Å–∞–ª—É" and msg.from_user.id == ADMIN_ID)
async def prompt_video(message: types.Message):
    await message.answer("–í–∏–¥–µ–æ–ª–∞—Ä–¥—ã –∂—ñ–±–µ—Ä–µ –±–µ—Ä—ñ“£—ñ–∑ (–±—ñ—Ä–Ω–µ—à–µ—É—ñ–Ω “õ–∞—Ç–∞—Ä).")

@dp.message_handler(content_types=types.ContentType.VIDEO)
async def save_video(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        video_id = message.video.file_id
        cursor.execute("INSERT INTO videos (file_id) VALUES (?)", (video_id,))
        conn.commit()
        await message.reply("‚úÖ –í–∏–¥–µ–æ —Å–∞“õ—Ç–∞–ª–¥—ã.")
    else:
        await message.reply("–¢–µ–∫ –∞–¥–º–∏–Ω “ì–∞–Ω–∞ –≤–∏–¥–µ–æ —Å–∞–ª–∞ –∞–ª–∞–¥—ã.")

# üë∂ –î–µ—Ç—Å–∫–∏–π –±–∞—Ç—ã—Ä–º–∞—Å—ã
@dp.message_handler(lambda msg: msg.text == "–î–µ—Ç—Å–∫–∏–π")
async def show_video(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT bonus FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()

    if row and row[0] >= 3:
        cursor.execute("SELECT file_id FROM videos ORDER BY RANDOM() LIMIT 1")
        video = cursor.fetchone()
        if video:
            await bot.send_video(chat_id=message.chat.id, video=video[0])
            cursor.execute("UPDATE users SET bonus = bonus - 3 WHERE user_id = ?", (user_id,))
            conn.commit()
        else:
            await message.answer("“ö–∞–∑—ñ—Ä –≤–∏–¥–µ–æ –∂–æ“õ.")
    else:
        await message.answer("‚ùå 3 –±–æ–Ω—É—Å –∫–µ—Ä–µ–∫!")

# üéÅ –ë–æ–Ω—É—Å –±–∞—Ç—ã—Ä–º–∞—Å—ã
@dp.message_handler(lambda msg: msg.text == "–ë–æ–Ω—É—Å")
async def bonus(message: types.Message):
    user_id = message.from_user.id
    link = await get_start_link(payload=str(user_id), encode=True)
    cursor.execute("SELECT bonus FROM users WHERE user_id = ?", (user_id,))
    bonus = cursor.fetchone()[0]
    await message.answer(f"üéÅ –°—ñ–∑–¥—ñ“£ –±–æ–Ω—É—Å—ã“£—ã–∑: {bonus}\nüì¢ –î–æ—Å—Ç–∞—Ä—ã“£—ã–∑–¥—ã —à–∞“õ—ã—Ä—ã“£—ã–∑: {link}")

# üëë VIP –±–∞—Ç—ã—Ä–º–∞—Å—ã
@dp.message_handler(lambda msg: msg.text == "VIP")
async def vip(message: types.Message):
    await message.answer("üëë VIP –ë–æ–Ω—É—Å—Ç–∞—Ä —Å–∞—Ç—ã–ø –∞–ª—É:\n\n50 –±–æ–Ω—É—Å = 2000—Ç–≥\n100 –±–æ–Ω—É—Å = 4000—Ç–≥\n\n–°–∞—Ç—ã–ø –∞–ª—É “Ø—à—ñ–Ω: @KazHubALU")

# üë• “ö–æ–ª–¥–∞–Ω—É—à—ã —Å–∞–Ω—ã
@dp.message_handler(lambda msg: msg.text == "“ö–æ–ª–¥–∞–Ω—É—à—ã —Å–∞–Ω—ã" and msg.from_user.id == ADMIN_ID)
async def count_users(message: types.Message):
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    await message.answer(f"üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {count}")

# üì£ –†–∞—Å—Å—ã–ª–∫–∞
@dp.message_handler(lambda msg: msg.text == "–†–∞—Å—Å—ã–ª–∫–∞" and msg.from_user.id == ADMIN_ID)
async def start_broadcast(message: types.Message):
    await message.answer("‚úâÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑–¥—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑ (–±–∞—Ä–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä“ì–∞ —Ç–∞—Ä–∞—Ç—ã–ª–∞–¥—ã).")

@dp.message_handler(lambda msg: msg.from_user.id == ADMIN_ID, content_types=types.ContentType.TEXT)
async def broadcast_text(message: types.Message):
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for user in users:
        try:
            await bot.send_message(user[0], message.text)
        except:
            pass
    await message.answer("‚úÖ –ë–∞—Ä–ª—ã“ì—ã–Ω–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")

# üìÇ –ü–∞–ø–∫–∞ –∂–∞—Å–∞—É
if not os.path.exists("saved_videos"):
    os.makedirs("saved_videos")

# üîÑ –°—Ç–∞—Ä—Ç
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
